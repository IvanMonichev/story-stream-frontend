name: 🚀 CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/story-stream-frontend

jobs:
  lint:
    name: 🧹 ESLint Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      - name: 🧱 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: 📦 Install dependencies
        run: npm i
      - name: 🔍 Run ESLint
        run: npm run lint

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      - name: 🧱 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: 📦 Install dependencies
        run: npm i
      - name: 🧪 Execute tests
        run: npm test

  build:
    name: 🛠️ Build Application
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ test ]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      - name: 🧱 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: 📦 Install dependencies (CI)
        run: npm i
      - name: 🏗️ Run build
        run: npm run build
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ build ]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🧱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 📦 Read version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: 🏗️ Build and tag Docker image
        run: |
          docker build \
            -t $IMAGE_NAME:latest \
            -t $IMAGE_NAME:$VERSION \
            ./

      - name: 🚀 Push Docker image
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION
